# lf doc: https://github.com/gokcehan/lf/blob/master/doc.md
# lfrc example - https://github.com/gokcehan/lf/blob/master/etc/lfrc.example

#
# Options
#

set shell bash
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
# set drawbox
set incsearch
set smartcase
set ignorecase
set anchorfind
set findlen 1
set tabstop 4
set info size
set sixel
set preview
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
set dircounts
setlocal ~/Downloads sortby "atime"
setlocal ~/Downloads reverse
set hiddenfiles ".DS_Store:.git"

#
# Commands
#

# Override the default open for file opening (binded to 'l' by default)
cmd open &{{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/*|application/json|inode/x-empty|application/octet-stream) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# Create a directory with the selected items
cmd new-folder-with-selection ${{
    set -f
    printf "Directory name: "
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}

cmd chmod ${{
    printf "\nMode Bits: "
    read ans
    for file in "$fx"
    do
        chmod $ans $file
    done
    lf -remote 'send reload'
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar) tar xvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
        *) echo "Unsupported format";;
    esac
}}

cmd tar ${{
        set -f
        mkdir $1
        cp -r $fx $1
        tar czf $1.tar.gz $1
        rm -rf $1
}}

cmd zip ${{
        set -f
        mkdir $1
        cp -r $fx $1
        zip -r $1.zip $1
        rm -rf $1
}}

cmd delete ${{
    set -f
    printf "\n$fx\n"
    printf "delete?[y/N]"
    read ans
    if [[ $ans == "y" ]]; then
        rm -rf $fx
    fi
}}

cmd trash !{{
    set -f
    printf "\nItems to be trashed:\n$fx\n\nTrash? [y/N]"
    read ans
    if [[ $ans == "y" ]]; then
        trash -F $fx && echo "Trash complete!"
    elif [[ $ans == "n" ]]; then
        echo "Canceled!"
    else
        echo "Failed! Use y to trash."
    fi
}}

cmd select-all :unselect; invert

# Bulk rename on selected files or all the non-hidden files in the current directory if no selection
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
                continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# Copy the file names (including extension) of the selections separated by \n
cmd copy-filename ${{
    names="$(echo $fx | tr ' ' '\n' | xargs -I{} basename {})"
    echo $names | tr ' ' '\n' | pbcopy
}}

# Copy the absolute paths of selections separated by \n
cmd copy-absolute-path ${{
    echo $fx | tr ' ' '\n' | pbcopy
}}

# Fzf to toggle the selections
cmd fzf-toggle-select ${{
    no_depth="/tmp/lf-fzf-toggle-select-no-depth"
    rm -f $no_depth
    fd_cmd="fd --max-depth 1 --hidden --follow $FD_EXCLUDE"
    selections=$(eval "$fd_cmd" | fzf \
        --multi \
        --header ':: ENTER (toggle selections), CTRL-T (toggle no-depth/depth-1 traveral)' \
        --prompt 'Files> ' \
        --bind "ctrl-t:transform: \
        [[ ! -e $no_depth ]] && { \
            touch $no_depth; \
            echo \"reload(fd --hidden --follow $FD_EXCLUDE)\"; \
        } || { \
            rm $no_depth; \
            echo \"reload($fd_cmd)\"; \
        }" \
    ) || true
    if [[ -n $selections ]]; then
        # Escape white spaces and format multi-line string to a single line one
        targets=$(echo "$selections" | sed 's/ /\\ /g' | tr '\n' ' ')
        cnt=$(echo "$selections" | wc -l)
        lf -remote "send $id toggle $targets"
        lf -remote "send $id echo Toggle $cnt selections"
    fi
}}

# Fzf: change the current file selection
cmd fzf-file ${{
    fd_cmd="fd --type f --type l --hidden --follow $FD_EXCLUDE"
    select=$(eval "$fd_cmd" | fzf \
        --no-multi \
        --header ':: ALT-/ (toggle HOME/CWD)' \
        --prompt 'Files [Current]> ' \
        --bind "alt-/:transform: \
        [[ ! \$FZF_PROMPT =~ HOME ]] && { \
            echo \"reload($fd_cmd . $HOME | sed 's|^$HOME|~|')+change-prompt(Files [HOME]> )\"; \
        } || { \
            echo \"reload($fd_cmd)+change-prompt(Files [CWD]> )\"; \
        }" \
    ) || true
    if [[ -n $select ]]; then
        lf -remote "send $id select $select"
    fi
}}

# Fzf: cd into the selected directory
cmd fzf-cd ${{
    fd_cmd="fd --type d --hidden --follow $FD_EXCLUDE"
    select=$(eval "$fd_cmd" | fzf \
        --no-multi \
        --header ':: ALT-/ (toggle HOME/CWD)' \
        --prompt 'Dirs [Current]> ' \
        --bind "alt-/:transform: \
        [[ ! \$FZF_PROMPT =~ HOME ]] && { \
            echo \"reload($fd_cmd . $HOME | sed 's|^$HOME|~|')+change-prompt(Dirs [HOME]> )\"; \
        } || { \
            echo \"reload($fd_cmd)+change-prompt(Dirs [CWD]> )\"; \
        }") || true
    if [[ -n $select ]]; then
        lf -remote "send $id cd $select"
    fi
}}

# Zoxide
cmd z %{{
    result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

# Git for dotfiles
cmd dot ${{
    git --git-dir=/Users/rockyzhang/dotfiles/ --work-tree=/Users/rockyzhang $@
}}

#
# Mappings
#

# Remove some defaults
map gh
map d
map y
map zh

# <space> is used as the leader key
map <space>

# enter to open
map <enter> open

map z. set hidden!
map <tab> :toggle; down
map <c-s> :toggle
map yy copy
map yn copy-filename
map yP copy-absolute-path
map d delete
map T trash
# list the size of each item in the current directory
map U !printf "\n"; du -csh *
map <c-t> fzf-toggle-select
map <c-f> fzf-file
map <c-j> fzf-cd
# give a name and then make a directory
map <c-n> push :mkdir<space>
map <a-n> new-folder-with-selection
map x cut
# give a name and then use neovim to edit it
map V push :!nvim<space>

# Navigate among the parent directories
map [ push hkl
map ] push hjl

# Rename
map r
map A rename # at the very end
map I push A<c-a> # at the very beginning
map rn push A<c-u> # rename the filename
map re push A<c-f><c-k> # rename the extension
map <c-r> bulk-rename

# compress (give a name like foo and it will compress the selected items to foo.zip)
map <space>c push :zip<space>
# extract
map <space>x extract
# Open the directory in Finder on macOS
map <space>f &if [[ -d $f ]]; then open $f; fi

cmap <tab> cmd-menu-complete
cmap <backtab> cmd-menu-complete-back

#
# Utils
#

# Store the absolute path of the selected file(s) to a temp file.
# For example, I can launch lf in Nvim's terminal, select files and open them in vsplit windows.
# To implement this, after openning lf, I can execute a shell command `lf -remote "send $pid
# util-store-filepath` to store the paths of the selected files to a temp file and then read the
# content of this temp file to get the file paths. Alternatively, after binding this command to
# a key, in Nvim I can use nvim_feedkeys to achieve the same goal.
cmd util-store-filepath ${{
    tempfile="$TMPDIR"/lf-filepath
    echo $fx > $tempfile
}}
map <a-E> util-store-filepath

# Save PWD to a temp file
# In my nvim's lf (~/.config/nvim/lua/rockyz/lf.lua), I create a keymap to change nvim's cwd to the
# current directory of lf.
map <a-Q> ${{
    tempfile="$TMPDIR"/lf-pwd
    echo $PWD > $tempfile
}}
