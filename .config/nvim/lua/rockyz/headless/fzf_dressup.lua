-- Get input lines from stdin. Decorate each line, e.g., prepend a devicon to the filename in each
-- line or ANSI color part of texts. And output processed lines to stdout.

local devicons = require('nvim-web-devicons')
local color = require('rockyz.utils.color_utils')

local source = vim.g.source

local function ansi_string(string, hl)
    local ansi = color.hl2ansi(hl)
    return ansi .. string .. '\x1b[m'
end

local function get_ansi_icon(filename)
    local ext = filename:match('^.+%.(.+)$')
    local file_icon, file_icon_hl = devicons.get_icon(filename, ext, { default = true })
    return ansi_string(file_icon, file_icon_hl)
end

for line in io.lines() do
    local output_line
    if source == 'fd' or source == 'git_ls_files' then
        -- lines are normal filenames. Prepend a devicon.
        local icon = get_ansi_icon(line)
        output_line = icon .. ' ' .. line
    elseif source == 'git_status' then
        -- lines are generated by `git status --porcelain=v1`. Each lines has one of these formats:
        -- XY FILENAME
        -- XY OLD_FILENAME -> NEW_FILENAME
        local f1, f2 = line:sub(4):gsub([["]], ''), nil
        if f1:match('%s%->%s') then
            f1, f2 = f1:match('(.*)%s%->%s(.*)')
        end
        f1 = f1 and (get_ansi_icon(f1) .. ' ' .. f1)
        f2 = f2 and (get_ansi_icon(f2) .. ' ' .. f2)
        local staged = ansi_string(line:sub(1, 1), 'GitStatusStaged')
        local unstaged = ansi_string(line:sub(2, 2), 'GitStatusUnstaged')
        output_line = string.format('[%s%s]  %s', staged, unstaged, (f2 and ('%s -> %s'):format(f1, f2) or f1))
    end

    io.stdout:write(output_line .. '\n')
end
